Welcome:
    Read the syllabus to get started: /syllabus
    Install python:
      Intro: /python/en/installing/intro
    Install Python on Windows:
      Step 1 install Miniconda: /python/en/installing/miniconda-win
      Step 2 install Pulsar: /python/en/installing/pulsar
      Step 3 command line interface: /python/en/installing/cli-win
      Step 4 install Conda environment: /python/en/installing/conda-env-sp
      Step 5 checkpy: /python/en/installing/checkpy
    Install Python on MacOS:
      Step 1 install Miniconda: /python/en/installing/miniconda-mac
      Step 2 install Pulsar: /python/en/installing/pulsar
      Step 3 command line interface: /python/en/installing/cli-mac
      Step 4 install Conda environment: /python/en/installing/conda-env-sp-mac
      Step 5 checkpy: /python/en/installing/checkpy


SP1 - L1 (Algorithms):

    Scientific Programming 1 - Level 1 (Algorithms):

    Intro: /algorithms/en/intro2

    Getting started:
        Basic elements of Python [theory]: /python/en/basics
        Basic elements of Python [practice]: /python/en/basics/practice
        Check your water usage [assignment]: /algorithms/en/water

    Algorithms:
        Learn about algorithms [theory]: /python/en/algorithms
        Practice with algorithms [practice]: /python/en/algorithms/practice

    Loops:
        Learn about for-loops [theory]: /python/en/loops/for
        Practice with for-loops [practice]: /python/en/loops/for/practice
        Learn about while-loops [theory]: /python/en/loops/while
        Practice with while-loops [practice]: /python/en/loops/while/practice
        Some typical uses of loops [theory]: /python/en/loops/practical-uses
        Practice more with loops [practice]: /python/en/loops/practical-uses/practice

    Pyramid:
        Build a Mario Pyramid [assignment]: /algorithms/en/pyramid

    Change:
        Looking for trouble [theory]: /python/en/debugging-basics
        Understand how to write good code [theory]: /python/en/style
        Calculate change [assignment]: /algorithms/en/greedy
        Review the previous assignment [peer review]: /peer

    Plotting graphs:
        Learn about lists [theory]: /python/en/lists
        Practice with lists [practice]: /python/en/lists/practice
        For loop strategies [theory]: /python/en/loops/element-vs-index
        For-loops with indexing [theory]: /python/en/loops/element-vs-index
        Learn how to use modules [theory]: /python/en/modules
        Learn about plotting in Python [theory]: /python/en/plotting
        Visualize data with plots [assignment]: /plot/en/

    Submit:
        Submit your solutions: /submit/algorithms

SP1 - L1 (Number theory):
    Scientific Programming 1 - Level 1 (Number Theory):

    Introduction: /numbers/en/intro2

    Getting started:
        Basic elements of Python [theory]: /python/en/basics
        Basic elements of Python [practice]: /python/en/basics/practice
        Create a Number Whiz [assignment]: /numbers/en/whiz

    Algorithms:
        Learn about algorithms [theory]: /python/en/algorithms
        Practice with algorithms [practice]: /python/en/algorithms/practice

    Loops:
        Learn about for-loops [theory]: /python/en/loops/for
        Practice with for-loops [practice]: /python/en/loops/for/practice
        Learn about while-loops [theory]: /python/en/loops/while
        Practice with while-loops [practice]: /python/en/loops/while/practice
        Some typical uses of loops [theory]: /python/en/loops/practical-uses
        Practice more with loops [practice]: /python/en/loops/practical-uses/practice

    Leap:
        Find leap-years [assignment]: /numbers/en/leap
        Find birthdays of leap-year babies [assignment]: /numbers/en/birthday

    Prime numbers:
        Looking for trouble [theory]: /python/en/debugging-basics
        Look for prime numbers [assignment]: /numbers/en/primes
        Learn about lists [theory]: /python/en/lists
        Practice with lists [practice]: /python/en/lists/practice
        For loop strategies [theory]: /python/en/loops/element-vs-index
        Make lists of prime numbers [assignment]: /numbers/en/primelist

    Number theory:
        Understand how to write good code [theory]: /python/en/style
        Prove (?) Goldbach's conjecture [assignment]: /numbers/en/goldbach

    Plotting graphs:
        Learn how to use modules [theory]: /python/en/modules
        Learn about plotting in Python [theory]: /python/en/plotting
        For-loops with indexing [theory]: /python/en/loops/element-vs-index
        Visualize data with plots [assignment]: /plot/en/

    Submit:
        Submit your solutions: /submit/numbers

SP1 - L2 (Numerical integration):
    Scientific Programming 1 - Level 2 (Numerical Integration):
    Introduction: /integrals/en/intro2
    Roots:
        Learn about functions in Python [theory]: /python/en/functions
        Practice with functions on paper [practice]: /python/en/functions-book
        Practice with functions in Python [practice]: /python/en/functions/practice
        Determine the roots of a polynomial [assignment]: /integrals/en/roots

    Riemann:
        Learn more about the Riemann sum [theory]: /integrals/en/riemann/explanation
        Compute the Riemann sum [assignment]: /integrals/en/riemann/integrals

    Random:
        Learn more about random numbers [theory]: /python/en/random
        Random fact [assignment]: /integrals/en/random/fact
        Calculate the average distance between two points in a square [assignment]: /integrals/en/random/distance
        Analyse with a histogram the output of the `random` function [assignment]: /integrals/en/random/histogram

    Monte Carlo:
        Learn about functions as arguments of other functions [theory]: /python/en/functions2
        Learn more about the Monte-Carlo method [theory]: /integrals/en/monte-carlo/explanation
        Calculate integrals with the Monte Carlo method [assignment]: /integrals/en/monte-carlo/integrals
        Calculate the surface of an odd shape [assignment]: /integrals/en/monte-carlo/egg
    Submit:
        Submit your solutions: /submit/integrals

SP1 - L2 (Text Processing):
    Scientific Programming 1 - Level 2 (Text Processing):

    Introduction: /text/en/intro2

    Text statistics:
        Learn about functions in Python [theory]: /python/en/functions
        Practice with functions on paper [practice]: /python/en/functions-book
        Practice with functions in Python [practice]: /python/en/functions/practice
        Learn about strings [theory]: /python/en/strings
        Calculate basic statistics for a text [assignment]: /text/en/statistics

    Text cleanup:
        Analyze text content word-by-word [assignment]: /text/en/words
        Align a text [assignment]: /text/en/align

    Sentiment analysis:
        Learn how to read text from files [theory]: /python/en/file-io
        Learn to analyse and process a data set [theory]: /python/en/files
        Perform a sentiment analysis [assignment]: /text/en/sentiment
        Present an overview of Twitter sentiment [assignment]: /text/en/tweets

    Submit:
        Submit your solutions: /submit/text

SP1 - L3 (Big Data):
    Scientific Programming 1 - Level 3 (Big Data):

    Introduction: /bigdata/en/

    Big data:
        Learn about file I/O (repeated if you did Text) [theory]: /python/en/file-io
        Learn to analyse and process a data set (repeated if you did Text) [theory]: /python/en/files
        Process sensor data of a car ride [assignment]: /bigdata/en/car
        Learn more about functions [theory]: /python/en/functions3
        Dig around in KNMI temperature data [assignment]: /bigdata/en/temperatures

    Submit:
        Submit your solutions: /submit/bigdata

SP1 - BONUS (Physics of Movement):
    Scientific Programming 1 - Bonus (Physics of Movement):

    Animating in Python:
        Learn how to create animated graphics [theory]: /animation/en/explanation
        A spiraling dot [assignment]: /animation/en/dot
        Explore the movements of a buzzed student [assignment]: /animation/en/student
    Gravitational movement:
        Introduction: /movement/en/
        Learn more about functions [theory]: /python/en/functions3
        Study the movement of a falling apple [assignment]: /movement/en/apple
        Read up on the use of plotting with multiple graphs [theory]: /python/en/plotting
        Study a basejumper's movement [assignment]: /movement/en/basejump
    The ultimate freefall:
        Learn more about debugging simulations [theory]: /python/en/debugging
        What happens when you fall through the earth [assignment]: /movement/en/freefall
    Submit:
        Submit your solutions: /submit/movement

SP1 - Practice exam:
    Practice exam: /practice-exams/sp1/

SP1 - Exam:
    Exam: /sp1exam


SP2 - L4 (Monopoly):
    Scientific Programming 2 - Level 4 (Monopoly):
    Animating in Python:
        Learn how to create animated graphics [theory]: /animation/en/explanation
        A spiraling dot [assignment]: /animation/en/dot
        Explore the movements of a buzzed student [assignment]: /animation/en/student
    Monopoly:
        Introduction: /monopoly/en/
        Learn about debugging simulations [theory]: /python/en/debugging
        Main function [theory]: /python/en/main_function
        Moving around the board [assignment]: /monopoly/en/moving-around
        "Design: default arguments [theory]": /python/en/default-arguments
        Using starting funds and buying stuff [assignment]: /monopoly/en/money
        Add a player and restore the balance [assignment]: /monopoly/en/two-player
    Submit:
        Submit your solutions: /submit/monopoly


SP2 - L5 (Shakespeare):
    Scientific Programming 2 - Level 5 (Shakespeare):
    Introduction: /shakespeare/intro
    "Part 1: Computational complexity":
        Complexity [theory]: /python/en/efficiency
        Complexity questions [assignment]: /shakespeare/complexity-questions
    "Part 2: Data structures":
        Dictionaries [theory]: /python/en/dictionaries/use
        Dictionaries [practice]: /python/en/dictionaries/use/practice
        Efficiency of dictionaries [theory]: /python/en/dictionaries/complexity
        Efficiency of dictionaries [practice]: /python/en/dictionaries/complexity/practice
        Tuples [theory]: /python/en/tuples
        Sets [theory]: /python/en/sets
        Sets [practice]: /python/en/sets/practice
        Use dictionaries and sets [assignment]: /shakespeare/datastructures
    "Part 3: Unique word classifier":
        Optimize [assignment]: /shakespeare/optimize-unique-words
        Extend [assignment]: /shakespeare/extend-unique-words
    "Part 4: TF-IDF classifier":
        Create a TF-IDF classifier [assignment]: /shakespeare/tf-idf-classifier
    "Part 5: Generate shakspeare data (BONUS)":
        Generate your own word lists: /shakespeare/generate-word-list

    Submit your solutions: /submit/shakespeare


SP2 - L5 (Word Index):
    Scientific Programming 2 - Level 5 (Word Index):
    Introduction: /complexity
    "Part 1: Computational complexity":
        Complexity [theory]: /python/en/efficiency
        Complexity questions 1 [assignment]: /complexity/questions1
    "Part 2: Data structures":
        Dictionaries [theory]: /python/en/dictionaries/use
        Dictionaries [practice]: /python/en/dictionaries/use/practice
        Efficiency of dictionaries [theory]: /python/en/dictionaries/complexity
        Efficiency of dictionaries [practice]: /python/en/dictionaries/complexity/practice
        Tuples [theory]: /python/en/tuples
        Sets [theory]: /python/en/sets
        Sets [practice]: /python/en/sets/practice
        List slicing and indexing [theory]: /python/en/slicing
    "Part 3: Optimizing code":
        Applying big O in your code [theory]: /python/en/big-o
        Improving count_occurrence [theory]: /python/en/big-o-example
        Complexity questions 2 [assignment]: /complexity/questions2
        Jaccard [assignment]: /complexity/jaccard
    "Part 4: Indexing":
        Indexing words [assignment]: /complexity/word-index
    Submit your solutions: /submit/complexity


SP2 - L6 (Survival):
    Scientific Programming 2 - Level 6 (Survival):
    Introduction: /survival/
    Function arguments:
        Default arguments [theory]: /python/en/default-arguments
        Keyword arguments [theory]: /python/en/keyword-arguments/kwargs
    Jupyter notebook:
        Jupyter notebook [practice]: /pandas/notebooks-sp
    Pandas:
        Pandas [practice]: /pandas/pandas-sp
    Seaborn:
        Seaborn [practice]: /pandas/seaborn
    Survival:
        Mushrooms [assignment]: /pandas/survival-sp
    Submit your solutions: /submit/survival

SP2 - BONUS (News):
    Scientific Programming 2 - BONUS (News):
    Introduction: /news/
    "Part 1: Functional Programming":
        Functional programming (reading): /python/en/functional-programming
        Functional programming (assignment): /news/functional
    "Part 2: Create a new Python package":
        Packages (reading): /python/en/packages
        Packages (assignment): /news/package
    "Part 3: File I/O":
        File I/O (reading): /python/en/file-io
        The OS library (reading): /python/en/os
    "Part 4: Natural language processing":
        Tokenize (assignment): /news/tokenize
        Unigrams (assignment): /news/unigrams
        Bigrams (assignment): /news/bigrams
    Submit your solutions: /submit/news

SP2 - Practice exam:
    Practice exam: /practice-exams/sp2/

SP2 - Exam:
    Exam: /sp2exam

DP - L7 (Populations):
    Data Processing - Level 7 (Populations) [graded assignment]:
    Introduction: /populations-oo
    Classes:
        Learn about using classes in Python [theory]: /python/en/classes
        Practice with classes [practice]: /objects/cards
    Default arguments:
        Default arguments [theory]: /python/en/default-arguments
    Populations (part 1):
        Introduction: /populations-oo/introduction
        Phase 1: /populations-oo/phase1
        Phase 2: /populations-oo/phase2
        Phase 3: /populations-oo/phase3
        Phase 4: /populations-oo/phase4
        Phase 5: /populations-oo/phase5
        Phase 6: /populations-oo/phase6
        Phase 7: /populations-oo/phase7
        Phase 8: /populations-oo/phase8
        Phase 9: /populations-oo/phase9
    Theory:
        Keyword arguments [theory]: /python/en/keyword-arguments/kwargs
        Args and kwargs [theory]: /python/en/keyword-arguments/starstar
        Sampling methods [theory]: /populations-oo/sampling
    Populations (part 2):
        Experiment: /populations-oo/experimenting
        Visualize: /populations-oo/visualizing
    Submit your solutions: /submit/populations

DP - L8 (Acquisition):
    Data Processing - Level 8 (Acquisition) [pass/fail assignment]:
    Introduction: "/acquisition"
    HTML:
        What is HTML?: /homepage/html
        Make your own website: /homepage/homepage
    # # no homepage:
    # HTML:
    #     What is a website?: /acquisition/html-short
    More Pandas:
        Improve your Pandas skills: "/pandas/advanced"
    Scraping:
        Introduction: "/acquisition/scraping"
        Scraping a single page: "/acquisition/scraping1"
        Scrape more pages: "/acquisition/scraping2"
        Transforming data to be more usable: "/acquisition/transforming"
        Visualizing the data: "/acquisition/visualizing"
    Crawling:
        Get even more data: "/acquisition/crawling"
        Visualize the actors: "/acquisition/crawling2"
        Visualize languages: "/acquisition/crawling3"
    Submit: "/acquisition/submit"

DP - L8 (Wikipedia):
    Data Processing - Level 8 (Wikipedia) [pass/fail assignment]:
    Introduction: "/wikipedia/intro"
    HTML:
        What is HTML?: /homepage/html
        Make your own website: /homepage/homepage
    Scraping:
        Scraping a Wikipedia page: "/wikipedia/scraping"
        Plotting the results: "/wikipedia/visualize-gdp"
    Crawling:
        Crawling Wikipedia: "/wikipedia/crawling"
        Plotting the results: "/wikipedia/visualize-gini"

DP - L9 (Transformation):
    Data Processing - Level 9 (Transformation) [graded assignment]:
    Introduction: /transformation/
    Transform and visualize climate data: /transformation/climate-change
    Work with structured data in health:
        "Part one: merging the data": /transformation/health-code-violations-1
        "Part two: processing the data": /transformation/health-code-violations-2-no-yelp
    Submit: /transformation/submit

DP - L10 (Databases):
    Data Processing - Level 10 (Databases) [pass/fail assignment]:
    Introduction: /sql/intro
    Learn SQL:
        Learn about Databases: /sql/lecture
        Store movie information using sqlite: /sql/movies
    Fiftyville:
        Solve a mistery using sqlite: /sql/fiftyville
    Submit: /sql/submit

DP - Final project:
    Data Processing - Final Project [graded assignment]:
    Learn to use git: /basics/git
    Project: /project
    Submit: /project/submit

#
# Exam:
#     Exam: /exam/exam
